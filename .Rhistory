install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
summary(adData)
dim(adData)
dim(training)
dim(testing)
adData1 = data.frame(predictors)
trainIndex1 = createDataPartition(diagnosis,p=0.5,list=FALSE)
training1 = adData1[trainIndex1,]
testing1 = adData1[-trainIndex1,]
dim(adData1)
dim(testing1)
dim(training1)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(mixtures)
mixtures$Superplasticizer
logSup <- log(mixtures$Superplasticizer)
logSup
logSup1 <- log(mixtures$Superplasticizer+1)
logSup1
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
summary(vowel.train)
head(vowel.train)
str(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
str(vowel.train)
set.seed(33833)
rf <- train(y~.,data=vowel.train,method="rf")
library(caret)
rf <- train(y~.,data=vowel.train,method="rf")
gbm <- train(y~.,data=vowel.train,method="gbm")
rf.result <- predict(rf, vowel.test)
gbm.result <- predict(gbm, vowel.test)
head(rf.result)
confusionMatrix(vowel.test$y, rf.result)
confusionMatrix(vowel.test$y, gbm.result)
idx_agreed <- (rf.result==gbm.result)
head(idx_agreed)
install.packages("shiny")
setwd("C:\Users\An\Documents\Study\Coursera\Developing Data Products\CourseProject")
setwd("~/Study/Coursera/Developing Data Products/CourseProject")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
?plotOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?checkboxInput
?submitButton
?submitButton
runApp()
shiny::runApp()
l <- list("A","B","C","D")
l[1]
l[[1]]
l$"A"
l$A
shiny::runApp()
?rep
shiny::runApp()
shiny::runApp()
?radioButtons
shiny::runApp()
?submitButton
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ans <- c(0,0,0,0,0)
ans[1]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?which
which(LETTERS == "R")
myV <- c(1,2,3,3)
which(myV==max(myV))
which(LETTERS == 'R')
LETTERS
ans <- c(3,3,0,0,4)
ans <- ans[1:4]
ans
type <- c(3,4)
type <- which(myV==max(myV))
type
runif(1:length(type))
sample(1:length(type))
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
sample(1:length(type),1)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
